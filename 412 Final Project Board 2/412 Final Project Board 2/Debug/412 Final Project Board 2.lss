
412 Final Project Board 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd6  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b91  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce1  00000000  00000000  00001f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010b58  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030e  00000000  00000000  00013830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00013b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f10  00000000  00000000  00013ba6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
  72:	00 00       	nop
  74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2e c0       	rjmp	.+92     	; 0xea <__bad_interrupt>
  8e:	00 00       	nop
  90:	2c c0       	rjmp	.+88     	; 0xea <__bad_interrupt>
  92:	00 00       	nop
  94:	2a c0       	rjmp	.+84     	; 0xea <__bad_interrupt>
  96:	00 00       	nop
  98:	28 c0       	rjmp	.+80     	; 0xea <__bad_interrupt>
  9a:	00 00       	nop
  9c:	26 c0       	rjmp	.+76     	; 0xea <__bad_interrupt>
  9e:	00 00       	nop
  a0:	24 c0       	rjmp	.+72     	; 0xea <__bad_interrupt>
  a2:	00 00       	nop
  a4:	22 c0       	rjmp	.+68     	; 0xea <__bad_interrupt>
  a6:	00 00       	nop
  a8:	20 c0       	rjmp	.+64     	; 0xea <__bad_interrupt>
  aa:	00 00       	nop
  ac:	1e c0       	rjmp	.+60     	; 0xea <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1c c0       	rjmp	.+56     	; 0xea <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e1       	ldi	r30, 0x1C	; 28
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e0       	ldi	r26, 0x02	; 2
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 30       	cpi	r26, 0x05	; 5
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	92 d0       	rcall	.+292    	; 0x20c <main>
  e8:	97 c0       	rjmp	.+302    	; 0x218 <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
  ec:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	8f 77       	andi	r24, 0x7F	; 127
  f4:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
  f6:	89 2f       	mov	r24, r25
  f8:	80 6a       	ori	r24, 0xA0	; 160
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	08 95       	ret

000000fe <gamestate_to_led>:
		//count++;
	//}
}

void gamestate_to_led(unsigned char reception1, unsigned char reception2, unsigned char reception3) {
	DDRB = 0xff;
  fe:	9f ef       	ldi	r25, 0xFF	; 255
 100:	94 b9       	out	0x04, r25	; 4
	DDRC = 0xff;
 102:	97 b9       	out	0x07, r25	; 7
	DDRD = 0xff;
 104:	9a b9       	out	0x0a, r25	; 10
	PORTB = 0xff;
 106:	95 b9       	out	0x05, r25	; 5
	PORTC = 0xff;
 108:	98 b9       	out	0x08, r25	; 8
	PORTD = 0xff;
 10a:	9b b9       	out	0x0b, r25	; 11
	
	PBEntry = (reception1 & 63);
 10c:	98 2f       	mov	r25, r24
 10e:	9f 73       	andi	r25, 0x3F	; 63
 110:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PBEntry>
	PCEntry = (reception2 & 63);
 114:	26 2f       	mov	r18, r22
 116:	2f 73       	andi	r18, 0x3F	; 63
 118:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <PCEntry>
	PDEntry = (((reception1 & 192) >> 2) + (reception2 & 192) + ((reception3 & 3) << 2));
 11c:	43 70       	andi	r20, 0x03	; 3
 11e:	44 0f       	add	r20, r20
 120:	44 0f       	add	r20, r20
 122:	60 7c       	andi	r22, 0xC0	; 192
 124:	64 0f       	add	r22, r20
 126:	80 7c       	andi	r24, 0xC0	; 192
 128:	86 95       	lsr	r24
 12a:	86 95       	lsr	r24
 12c:	68 0f       	add	r22, r24
 12e:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
	
	
	PORTB = (~PBEntry);
 132:	90 95       	com	r25
 134:	95 b9       	out	0x05, r25	; 5
	PORTC = (~PCEntry);
 136:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PCEntry>
 13a:	80 95       	com	r24
 13c:	88 b9       	out	0x08, r24	; 8
	PORTD = (~PDEntry);
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 142:	80 95       	com	r24
 144:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	87 ea       	ldi	r24, 0xA7	; 167
 148:	91 e6       	ldi	r25, 0x61	; 97
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <gamestate_to_led+0x4c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <gamestate_to_led+0x52>
 150:	00 00       	nop
	//while(count < 5) {
		_delay_ms(100);
		count++;
	//}
	
	test = test*2;
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 166:	08 95       	ret

00000168 <flash_led_short>:

}

void flash_led_short(void) {
	
	DDRB = 0xff;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	84 b9       	out	0x04, r24	; 4

	int count = 0;

	//while(count < 2) {
		PORTB = 0;
 16c:	15 b8       	out	0x05, r1	; 5
 16e:	2f e3       	ldi	r18, 0x3F	; 63
 170:	32 e4       	ldi	r19, 0x42	; 66
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	21 50       	subi	r18, 0x01	; 1
 176:	30 40       	sbci	r19, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <flash_led_short+0xc>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <flash_led_short+0x16>
 17e:	00 00       	nop
		_delay_ms(5000);
		PORTB = 255;
 180:	85 b9       	out	0x05, r24	; 5
 182:	2f e3       	ldi	r18, 0x3F	; 63
 184:	32 e4       	ldi	r19, 0x42	; 66
 186:	8f e0       	ldi	r24, 0x0F	; 15
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	30 40       	sbci	r19, 0x00	; 0
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <flash_led_short+0x20>
 190:	00 c0       	rjmp	.+0      	; 0x192 <flash_led_short+0x2a>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <USART_Init>:
	//}
}

void USART_Init( unsigned int ubrr){
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 196:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 19a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 19e:	88 e1       	ldi	r24, 0x18	; 24
 1a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1aa:	08 95       	ret

000001ac <USART_Transmit>:


void USART_Transmit( unsigned char data ){
	
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 1ac:	e0 ec       	ldi	r30, 0xC0	; 192
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	90 81       	ld	r25, Z
 1b2:	95 ff       	sbrs	r25, 5
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <USART_Transmit+0x4>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ba:	08 95       	ret

000001bc <USART_Receive>:
}

unsigned char USART_Receive( void ){
	
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 1bc:	e0 ec       	ldi	r30, 0xC0	; 192
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	ec f7       	brge	.-6      	; 0x1c0 <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 1c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 1ca:	08 95       	ret

000001cc <USART_Flush>:

void USART_Flush( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
 1cc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1d0:	88 23       	and	r24, r24
 1d2:	44 f4       	brge	.+16     	; 0x1e4 <USART_Flush+0x18>
 1d4:	a6 ec       	ldi	r26, 0xC6	; 198
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e0 ec       	ldi	r30, 0xC0	; 192
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8c 91       	ld	r24, X
 1de:	80 81       	ld	r24, Z
 1e0:	88 23       	and	r24, r24
 1e2:	e4 f3       	brlt	.-8      	; 0x1dc <USART_Flush+0x10>
 1e4:	08 95       	ret

000001e6 <USART_Communicate_Boardstate>:
}

void USART_Communicate_Boardstate(void) {
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
	
	reception1 = 0;
	reception2 = 0;
	reception3 = 0;
		
	USART_Transmit('>');
 1ea:	8e e3       	ldi	r24, 0x3E	; 62
 1ec:	df df       	rcall	.-66     	; 0x1ac <USART_Transmit>
	reception1 = USART_Receive();
 1ee:	e6 df       	rcall	.-52     	; 0x1bc <USART_Receive>
 1f0:	c8 2f       	mov	r28, r24
	reception2 = USART_Receive();
 1f2:	e4 df       	rcall	.-56     	; 0x1bc <USART_Receive>
 1f4:	d8 2f       	mov	r29, r24
	reception3 = USART_Receive();
 1f6:	e2 df       	rcall	.-60     	; 0x1bc <USART_Receive>

	gamestate_to_led(reception1, reception2, reception3);
 1f8:	48 2f       	mov	r20, r24
 1fa:	6d 2f       	mov	r22, r29
 1fc:	8c 2f       	mov	r24, r28
 1fe:	7f df       	rcall	.-258    	; 0xfe <gamestate_to_led>
 200:	df 91       	pop	r29

}
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <launch_game>:
 206:	ef df       	rcall	.-34     	; 0x1e6 <USART_Communicate_Boardstate>

void launch_game(void) {
	while(true) {
		USART_Communicate_Boardstate();
		USART_Flush();
 208:	e1 df       	rcall	.-62     	; 0x1cc <USART_Flush>
 20a:	fd cf       	rjmp	.-6      	; 0x206 <launch_game>

0000020c <main>:
 20c:	6f df       	rcall	.-290    	; 0xec <board_init>
int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();	
	USART_Init(MYUBRR);
 20e:	8b e0       	ldi	r24, 0x0B	; 11
 210:	90 e0       	ldi	r25, 0x00	; 0
	flash_led_short();
 212:	c1 df       	rcall	.-126    	; 0x196 <USART_Init>
 214:	a9 df       	rcall	.-174    	; 0x168 <flash_led_short>
	
	launch_game();
 216:	f7 df       	rcall	.-18     	; 0x206 <launch_game>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
